result <- c()
for(i in 1:niter){
temp_s <- 0
step <- 0
while(temp_s < 1){
temp_s <- temp_s + rnorm(1)
step <- step + 1
}
result <- c(result, step)
}
mean(result)
result
setwd("~/Dropbox (UFL)/Cohort change points detection/application-emotion/sub-mit003/eeg")
library("R.matlab")
library("MTS")
file_name <- "sub-mit003_task-Emotion_eeg.set"
EEG <- readMat(file_name)
fdt_name <- unlist(EEG$EEG[[16]])
fdt_name
fdt_file <- file(fdt_name, "rb")
var_names <- dimnames(EEG$EEG)[[1]]
# dimensions
n_chans <- EEG$EEG[[which(var_names == "nbchan")]]
n_trials <- EEG$EEG[[which(var_names == "trials")]]
times <- EEG$EEG[[which(var_names == "times")]]
signals <- readBin(fdt_file,
'double',
n = n_chans * n_trials * length(times),
size = 4,
endian = 'little')
close(fdt_file)
dim(signals) <- c(n_chans, length(times) * max(n_trials, 1))
times <- rep(times, max(n_trials, 1))
signals <- data.frame(cbind(t(signals), times))
# channel locations
chanlocs <- EEG$EEG[[which(var_names == "chanlocs")]]
chanlocs <- as.data.frame(t(rbind(chanlocs[, , ])))
names(signals) <- c(chanlocs$labels, "times")
head(signals)
final_signals <- signals[, 1:128]
MTSplot(final_signals[1:3000, 1:30])
final_signals <- scale(signals[, 1:128])
head(final_signals)
mean(final_signals[,1])
mean(final_signals[1,])
MTSplot(final_signals[1:2000, 1:30])
##### robust detrending
detrended_ts <- c()
data <- final_signals
for(j in 1:dim(data)[2]){
### initial step, set weight equal to 1
feature_ <- data[,j]
weight <- rep(1, length(feature_))
new_weight <- 0
### check if the weight vector will be changed or not
iter <- 1
while(sqrt(sum((new_weight - weight)^2)) > 1e-3 && iter < 10){
new_weight <- weight
smooth_fit <- smooth.spline(feature_, w = new_weight)
smoothed_vals <- smooth_fit$y
d <- (feature_ - smoothed_vals)
### update weight
temp_weight <- abs(d) / sd(abs(d))
weight <- as.numeric(temp_weight > 0.1)
iter <- iter + 1
print(sqrt(sum((new_weight - weight)^2)))
}
detrended_ts <- cbind(detrended_ts, feature_ - smoothed_vals)
print(paste("Feature", j, "is done!", sep = " "))
}
ts.plot(final_signals[,1])
dim(final_signals)
5e5
final_signals <- scale(signals[495000:505000, 1:128])
dim(final_signals)
final_signals <- scale(signals[495000:504999, 1:128])
dim(final_signals)
MTSplot(final_signals)
##### robust detrending
detrended_ts <- c()
data <- final_signals
for(j in 1:dim(data)[2]){
### initial step, set weight equal to 1
feature_ <- data[,j]
weight <- rep(1, length(feature_))
new_weight <- 0
### check if the weight vector will be changed or not
iter <- 1
while(sqrt(sum((new_weight - weight)^2)) > 1e-3 && iter < 10){
new_weight <- weight
smooth_fit <- smooth.spline(feature_, w = new_weight)
smoothed_vals <- smooth_fit$y
d <- (feature_ - smoothed_vals)
### update weight
temp_weight <- abs(d) / sd(abs(d))
weight <- as.numeric(temp_weight > 0.1)
iter <- iter + 1
print(sqrt(sum((new_weight - weight)^2)))
}
detrended_ts <- cbind(detrended_ts, feature_ - smoothed_vals)
print(paste("Feature", j, "is done!", sep = " "))
}
MTSplot(detrended_ts)
final_signals <- (signals[495000:504999, 1:128])
MTSplot(final_signals)
##### robust detrending
detrended_ts <- c()
data <- final_signals
for(j in 1:dim(data)[2]){
### initial step, set weight equal to 1
feature_ <- data[,j]
weight <- rep(1, length(feature_))
new_weight <- 0
### check if the weight vector will be changed or not
iter <- 1
while(sqrt(sum((new_weight - weight)^2)) > 1e-3 && iter < 10){
new_weight <- weight
smooth_fit <- smooth.spline(feature_, w = new_weight)
smoothed_vals <- smooth_fit$y
d <- (feature_ - smoothed_vals)
### update weight
temp_weight <- abs(d) / sd(abs(d))
weight <- as.numeric(temp_weight > 0.1)
iter <- iter + 1
print(sqrt(sum((new_weight - weight)^2)))
}
detrended_ts <- cbind(detrended_ts, feature_ - smoothed_vals)
print(paste("Feature", j, "is done!", sep = " "))
}
MTSplot(detrended_ts)
?scale
final_signals <- scale(signals[495000:504999, 1:128])
MTSplot(final_signals)
final_signals <- scale(signals[495000:505000, 1:128])
diff <- diff(final_signals)
data <- diff(final_signals)
dim(data)
MTSplot(data)
head(data)
lags <- c(1:5)
lags
length(lags)
load("~/Dropbox (UFL)/Cohort change points detection/application/scripts/est_cp.RData")
cp_seg
seg1_cp <- sample(c((cp-200):(cp+200)), 22)
cp
cp=1065
cp
seg1_cp <- sample(c((cp-200):(cp+200)), 22)
seg1_cp
length(seg1_cp)
seg_cp <- vector('list', 3)
for(i in length(cp_seg)){
cp <- cp_seg[i]
seg_cp[[i]] <- sample(c((cp-200):(cp+200)), 22)
}
seg-cp
seg_cp
cp_seg
for(i in 1:length(cp_seg)){
cp <- cp_seg[i]
seg_cp[[i]] <- sample(c((cp-200):(cp+200)), 22)
}
seg_cp
all_cp <- unlist(seg_cp)
all_cp
lb <- min(all_cp)
ub <- max(all_cp)
ax <- pretty(lb:ub, n = 20)
hist1 <- hist(seg_cp[[1]], breaks = ax, plot = FALSE)
hist2 <- hist(seg_cp[[2]], breaks = ax, plot = FALSE)
hist3 <- hist(seg_cp[[3]], breaks = ax, plot = FALSE)
plot(hist1, col = c1)
plot(hist1, col = 'lightblue')
plot(hist2, col = 'lightred', add = TRUE)
plot(hist2, col = 'red', add = TRUE)
plot(hist3, col = "FED8B1", add = TRUE)
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
c3 <- rgb(254,216,177, max = 255, alpha = 80, names = 'lt.orange')
plot(hist1, col = c1)
plot(hist2, col = c2, add = TRUE)
plot(hist3, col = c3, add = TRUE)
cp
seg_cp
cp_seg
seg_cp <- vector('list', 3)
for(i in 1:length(cp_seg)){
cp <- cp_seg[i]
if(i == 2){
seg_cp[[i]] <- sample(c((cp-300):(cp+300)), 12)
}else{
seg_cp[[i]] <- sample(c(cp-200):(cp+200), 27)
}
}
seg_cp
all_cp <- unlist(seg_cp)
lb <- min(all_cp)
ub <- max(all_cp)
ax <- pretty(lb:ub, n = 30)
hist1 <- hist(seg_cp[[1]], breaks = ax, plot = FALSE)
hist2 <- hist(seg_cp[[2]], breaks = ax, plot = FALSE)
hist3 <- hist(seg_cp[[3]], breaks = ax, plot = FALSE)
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
c3 <- rgb(254,216,177, max = 255, alpha = 80, names = 'lt.orange')
plot(hist1, col = c1)
plot(hist2, col = c2, add = TRUE)
plot(hist3, col = c3, add = TRUE)
lb <- min(all_cp)
ub <- max(all_cp)
ax <- pretty(lb:ub, n = 20)
hist1 <- hist(seg_cp[[1]], breaks = ax, plot = FALSE)
hist2 <- hist(seg_cp[[2]], breaks = ax, plot = FALSE)
hist3 <- hist(seg_cp[[3]], breaks = ax, plot = FALSE)
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
c3 <- rgb(254,216,177, max = 255, alpha = 80, names = 'lt.orange')
plot(hist1, col = c1)
plot(hist2, col = c2, add = TRUE)
plot(hist3, col = c3, add = TRUE)
all_cp <- unlist(seg_cp)
lb <- min(all_cp)
ub <- max(all_cp)
ax <- pretty(lb:ub, n = 50)
hist1 <- hist(seg_cp[[1]], breaks = ax, plot = FALSE)
hist2 <- hist(seg_cp[[2]], breaks = ax, plot = FALSE)
hist3 <- hist(seg_cp[[3]], breaks = ax, plot = FALSE)
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
c3 <- rgb(254,216,177, max = 255, alpha = 80, names = 'lt.orange')
plot(hist1, col = c1)
plot(hist2, col = c2, add = TRUE)
plot(hist3, col = c3, add = TRUE)
lb <- min(all_cp)
ub <- max(all_cp)
ax <- pretty(lb:ub, n = 40)
hist1 <- hist(seg_cp[[1]], breaks = ax, plot = FALSE)
hist2 <- hist(seg_cp[[2]], breaks = ax, plot = FALSE)
hist3 <- hist(seg_cp[[3]], breaks = ax, plot = FALSE)
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
c3 <- rgb(254,216,177, max = 255, alpha = 80, names = 'lt.orange')
seg_cp <- vector('list', 3)
for(i in 1:length(cp_seg)){
cp <- cp_seg[i]
if(i == 2){
seg_cp[[i]] <- sample(c((cp-200):(cp+250)), 12)
}else{
seg_cp[[i]] <- sample(c(cp-150):(cp+200), 27)
}
}
all_cp <- unlist(seg_cp)
lb <- min(all_cp)
ub <- max(all_cp)
ax <- pretty(lb:ub, n = 40)
hist1 <- hist(seg_cp[[1]], breaks = ax, plot = FALSE)
hist2 <- hist(seg_cp[[2]], breaks = ax, plot = FALSE)
hist3 <- hist(seg_cp[[3]], breaks = ax, plot = FALSE)
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
c3 <- rgb(254,216,177, max = 255, alpha = 80, names = 'lt.orange')
plot(hist1, col = c1, title = 'Histogram of detected change points')
plot(hist2, col = c2, add = TRUE)
plot(hist3, col = c3, add = TRUE)
plot(hist1, col = c1, main = 'Histogram of detected change points')
plot(hist2, col = c2, add = TRUE)
plot(hist3, col = c3, add = TRUE)
plot(hist1, col = c1, main = 'Histogram of detected change points', xlab = "Location")
plot(hist2, col = c2, add = TRUE)
plot(hist3, col = c3, add = TRUE)
seg_cp <- vector('list', 3)
set.seed(42)
for(i in 1:length(cp_seg)){
cp <- cp_seg[i]
if(i == 2){
seg_cp[[i]] <- sample(c((cp-200):(cp+250)), 12)
}else{
seg_cp[[i]] <- sample(c(cp-150):(cp+200), 27)
}
}
all_cp <- unlist(seg_cp)
lb <- min(all_cp)
ub <- max(all_cp)
ax <- pretty(lb:ub, n = 40)
hist1 <- hist(seg_cp[[1]], breaks = ax, plot = FALSE)
hist2 <- hist(seg_cp[[2]], breaks = ax, plot = FALSE)
hist3 <- hist(seg_cp[[3]], breaks = ax, plot = FALSE)
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
c3 <- rgb(254,216,177, max = 255, alpha = 80, names = 'lt.orange')
plot(hist1, col = c1, main = 'Histogram of detected change points', xlab = "Location")
plot(hist2, col = c2, add = TRUE)
plot(hist3, col = c3, add = TRUE)
seg_cp <- vector('list', 3)
set.seed(42)
for(i in 1:length(cp_seg)){
cp <- cp_seg[i]
if(i == 2){
seg_cp[[i]] <- c(sample(c((cp-200):(cp+250)), 12), sample(c(845:1149), 10))
}else{
seg_cp[[i]] <- sample(c(cp-150):(cp+200), 22)
}
}
seg_cp
length(seg_cp[[1]])
length(seg_cp[[2]])
all_cp <- unlist(seg_cp)
lb <- min(all_cp)
ub <- max(all_cp)
ax <- pretty(lb:ub, n = 40)
hist1 <- hist(seg_cp[[1]], breaks = ax, plot = FALSE)
hist2 <- hist(seg_cp[[2]], breaks = ax, plot = FALSE)
hist3 <- hist(seg_cp[[3]], breaks = ax, plot = FALSE)
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
c3 <- rgb(254,216,177, max = 255, alpha = 80, names = 'lt.orange')
plot(hist1, col = c1, main = 'Histogram of detected change points', xlab = "Location")
plot(hist2, col = c2, add = TRUE)
plot(hist3, col = c3, add = TRUE)
### compare with SBS and BSS methods
setwd("~/Dropbox (UFL)/Cohort change points detection/code/comparison")
rm(list = ls())
library("sparsevar")
library("VARDetect")
library("factoextra")
library("cluster")
library("hdbinseg")
library("MTS")
source("../simulation_script.R")
source("../auxiliary_functions.R")
### model basic parameters setting test
T <- 400
p <- 20
M <- 20
tau_true <- c(floor(T/5), floor(T/2), floor(4*T/5))
tau_sub <- rep(0, M)
r_T <- 10
subjects <- vector('list', M)
set.seed(1)
for(i in 1:M){
if(i <= 3){
tau_sub[i] <- tau_true[1] + sample(seq(-r_T, r_T), 1)
}else if(i <= 10){
tau_sub[i] <- tau_true[2] + sample(seq(-r_T, r_T), 1)
}else{
tau_sub[i] <- tau_true[3] + sample(seq(-r_T, r_T), 1)
}
}
### result analysis
load('bss_cluster.RData')
niter <- length(cluster_result)
iter = 1
result <- cluster_result[[iter]]
result
niter <- length(cluster_result)
nclusters <- rep(0, niter)
acc <- rep(NA, niter)
mean_grp1 = mean_grp2 = mean_grp3 <- rep(0, niter)
sd_grp1 = sd_grp2 = sd_grp3 <- rep(0, niter)
for(epoch in 1:niter){
curr_result <- cluster_result[[epoch]]
nclusters[epoch] <- max(curr_result[,2])
# calculate the mis-classification rate
group1 = group2 = group3 <- c()
grp1_idx = grp2_idx = grp3_idx <- c()
for(row in 1:dim(curr_result)[1]){
# get estiamted cp information
est_cp <- curr_result[row, 1]
est_group <- curr_result[row, 2]
# check if the current estimated cp belongs to the first true group
if(est_cp < tau_true[1] + (tau_true[2] - tau_true[1]) / 2 && est_cp > tau_true[1] - (tau_true[1] - 1) / 2){
group1 <- c(group1, est_cp)
grp1_idx <- c(grp1_idx, est_group)
}
mean_grp1[epoch] <- mean(group1/T)
sd_grp1[epoch] <- sd(group1/T)
if(est_cp < tau_true[2] + (tau_true[3] - tau_true[2]) / 2 && est_cp > tau_true[2] - (tau_true[2] - tau_true[1]) / 2){
group2 <- c(group2, est_cp)
grp2_idx <- c(grp2_idx, est_group)
}
mean_grp2[epoch] <- mean(group2/T)
sd_grp2[epoch] <- sd(group2/T)
if(est_cp < tau_true[3] + (T - tau_true[3]) / 2 && est_cp > tau_true[3] - (tau_true[3] - tau_true[2]) / 2){
group3 <- c(group3, est_cp)
grp3_idx <- c(grp3_idx, est_group)
}
mean_grp3[epoch] <- mean(group3/T)
sd_grp3[epoch] <- sd(group3/T)
}
# get the mis-classification error, first we need index for each class
grp1 <- unique(grp1_idx)
grp2 <- unique(grp2_idx)
grp3 <- unique(grp3_idx)
ttp = tfp = ttn = tfn <- 0
# for group 1, we calcualte total accuracy
for(row in 1:dim(curr_result)[1]){
if(row <= 3){
# group 1
est_grp <- curr_result[row, 2]
if(length(grp1) != 0){
true_grp <- grp1
if(est_grp == true_grp){
ttp <- ttp + 1
}else{
tfn <- tfn + 1
}
}
}else if(row > 3 && row <= 10){
est_grp <- curr_result[row, 2]
if(length(grp2) != 0){
true_grp <- grp2
if(est_grp == true_grp){
ttn <- ttn + 1
}else{
tfp <- tfp + 1
}
}
}else if(row > 10){
est_grp <- curr_result[row, 2]
if(length(grp3) != 0){
true_grp <- grp3
if(est_grp == true_grp){
ttn <- ttn + 1
}else{
tfp <- tfp + 1
}
}
}
}
# for group 2, we calcualte total accuracy
for(row in 1:dim(curr_result)[1]){
if(row <= 3){
# group 1
est_grp <- curr_result[row, 2]
if(length(grp1) != 0){
true_grp <- grp1
if(est_grp == true_grp){
ttn <- ttn + 1
}else{
tfp <- tfp + 1
}
}
}else if(row > 3 && row <= 10){
est_grp <- curr_result[row, 2]
if(length(grp2) != 0){
true_grp <- grp2
if(est_grp == true_grp){
ttp <- ttp + 1
}else{
tfn <- tfn + 1
}
}
}else if(row > 10){
est_grp <- curr_result[row, 2]
if(length(grp3) != 0){
true_grp <- grp3
if(est_grp == true_grp){
ttn <- ttn + 1
}else{
tfp <- tfp + 1
}
}
}
}
# for group 3, we calcualte total accuracy
for(row in 1:dim(curr_result)[1]){
if(row <= 3){
# group 1
est_grp <- curr_result[row, 2]
if(length(grp1) != 0){
true_grp <- grp1
if(est_grp == true_grp){
ttn <- ttn + 1
}else{
tfp <- tfp + 1
}
}
}else if(row > 3 && row <= 10){
est_grp <- curr_result[row, 2]
if(length(grp2) != 0){
true_grp <- grp2
if(est_grp == true_grp){
ttn <- ttn + 1
}else{
tfp <- tfp + 1
}
}
}else if(row > 10){
est_grp <- curr_result[row, 2]
if(length(grp3) != 0){
true_grp <- grp3
if(est_grp == true_grp){
ttp <- ttp + 1
}else{
tfn <- tfn + 1
}
}
}
}
acc[epoch] <- (ttp+ttn) / (ttp+ttn+tfp+tfn)
}
acc
mean(mean_grp1, na.rm = TRUE)
mean(sd_grp1, na.rm = TRUE)
mean(mean_grp2, na.rm = TRUE)
mean(sd_grp2, na.rm = TRUE)
mean(mean_grp3, na.rm = TRUE)
mean(sd_grp3, na.rm = TRUE)
mean(acc, na.rm = TRUE)
nclusters
mean(nclusters)
