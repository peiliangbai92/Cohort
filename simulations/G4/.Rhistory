strings <- rep(1, N)
while(length(strings) > 0){
ends <- rep(1:length(strings), each = 2)
choice <- sample(ends, 2, replace = FALSE)
first_end <- choice[1]
second_end <- choice[2]
if(first_end != second_end){
# a string
new_string <- strings[first_end] + strings[second_end]
temp = c()
for(i in 1:length(strings)){
if(i != first_end && i != second_end){
temp <- c(temp, strings[i])
}
}
temp <- c(temp, new_string)
strings <- temp
}else{
# a loop
strings <- strings[-first_end]
loops <- loops + 1
}
}
ret <- c(ret, loops)
}
ret
?sample
strings
iter
iter <- 1
loops <- 0
strings <- rep(1, N)
strings
ends <- rep(1:length(strings), each = 2)
ends
choice <- sample(ends, 2, replace = FALSE)
choice
first_end <- choice[1]
second_end <- choice[2]
first_end
second_end
# a string
new_string <- strings[first_end] + strings[second_end]
new_string
temp = c()
for(i in 1:length(strings)){
if(i != first_end && i != second_end){
temp <- c(temp, strings[i])
}
}
temp
temp <- c(temp, 1)
strings <- temp
strings
length(strings)
ends <- rep(1:length(strings), each = 2)
choice <- sample(ends, 2, replace = FALSE)
ends
choice
first_end <- choice[1]
second_end <- choice[2]
if(first_end != second_end){
# a string
new_string <- 1
temp = c()
for(i in 1:length(strings)){
if(i != first_end && i != second_end){
temp <- c(temp, strings[i])
}
}
temp <- c(temp, 1)
strings <- temp
}else{
# a loop
strings <- strings[-first_end]
loops <- loops + 1
}
strings
ends <- rep(1:length(strings), each = 2)
choice <- sample(ends, 2, replace = FALSE)
first_end <- choice[1]
second_end <- choice[2]
if(first_end != second_end){
# a string
new_string <- 1
temp = c()
for(i in 1:length(strings)){
if(i != first_end && i != second_end){
temp <- c(temp, strings[i])
}
}
temp <- c(temp, 1)
strings <- temp
}else{
# a loop
strings <- strings[-first_end]
loops <- loops + 1
}
strings
loops
ends <- rep(1:length(strings), each = 2)
choice <- sample(ends, 2, replace = FALSE)
first_end <- choice[1]
second_end <- choice[2]
if(first_end != second_end){
# a string
new_string <- 1
temp = c()
for(i in 1:length(strings)){
if(i != first_end && i != second_end){
temp <- c(temp, strings[i])
}
}
temp <- c(temp, 1)
strings <- temp
}else{
# a loop
strings <- strings[-first_end]
loops <- loops + 1
}
ends <- rep(1:length(strings), each = 2)
choice <- sample(ends, 2, replace = FALSE)
first_end <- choice[1]
second_end <- choice[2]
if(first_end != second_end){
# a string
new_string <- 1
temp = c()
for(i in 1:length(strings)){
if(i != first_end && i != second_end){
temp <- c(temp, strings[i])
}
}
temp <- c(temp, 1)
strings <- temp
}else{
# a loop
strings <- strings[-first_end]
loops <- loops + 1
}
ends <- rep(1:length(strings), each = 2)
choice <- sample(ends, 2, replace = FALSE)
first_end <- choice[1]
second_end <- choice[2]
if(first_end != second_end){
# a string
new_string <- 1
temp = c()
for(i in 1:length(strings)){
if(i != first_end && i != second_end){
temp <- c(temp, strings[i])
}
}
temp <- c(temp, 1)
strings <- temp
}else{
# a loop
strings <- strings[-first_end]
loops <- loops + 1
}
### noodles problem
N <- 10
niter <- 1000
ret <- rep(0, niter)
for(iter in 1:niter){
loops <- 0
strings <- rep(1, N)
while(length(strings) > 0){
ends <- rep(1:length(strings), each = 2)
choice <- sample(ends, 2, replace = FALSE)
first_end <- choice[1]
second_end <- choice[2]
if(first_end != second_end){
# a string
new_string <- 1
temp = c()
for(i in 1:length(strings)){
if(i != first_end && i != second_end){
temp <- c(temp, strings[i])
}
}
temp <- c(temp, 1)
strings <- temp
}else{
# a loop
strings <- strings[-first_end]
loops <- loops + 1
}
}
ret[iter] <- loops
}
ret
cat("expected number of loops:", mean(ret), "\n")
result <- 0
for(i in 1:N){
result <- result + 1/(2*i-1)
}
cat("analytical result is:", result, "\n")
### 7. A and B are two football teams to have BO7, find the probability that we reach the game 7.
niter <- 1e4
result <- rep(0, niter)
p <- 0.55
for(iter in 1:niter){
a_win = b_win <- 0
ngames <- 0
while(ngames < 7){
game_result <- sample(c(0, 1), 1, prob = c(1-p, p))
ngames <- ngames + 1
if(game_result == 1){
a_win <- a_win + 1
}else{
b_win <- b_win + 1
}
if(a_win == 4 || b_win == 4){
result[iter] <- ngames
break
}
}
}
cat("probability of need to play 7 games:", length(which(result == 7)) / niter, "\n")
print(choose(6, 3) * p^3 * (1-p)^3)
####################################################################
###### some operations for dplyr
library("dplyr")
data("iris")
sepal_length_5 <- iris %>%
filter(Sepal.Length > 5.0) %>%
select(Sepal.Length, Sepal.Width, Species)
sepal_species <- iris %>%
group_by(Species) %>%
summarize(mean_size = mean(Sepal.Length, na.rm = TRUE),
var_size = sd(Sepal.Width, na.rm = TRUE))
sepal_species
filtered_sepal <- iris %>%
group_by(Species) %>%
summarize(mean_length = mean(Sepal.Length, na.rm = TRUE),
min_width = min(Sepal.Width))
filtered_sepal
updated_sepal <- iris %>%
mutate(Sepal.area = Sepal.Length * Sepal.Width,
Petal.area = Petal.Length * Petal.Width) %>%
filter(Sepal.area > 16.0) %>%
select(Sepal.area, Petal.area, Species) %>%
group_by(Species) %>%
summarize(mean_sepal_area = mean(Sepal.area),
mean_petal_area = mean(Petal.area))
updated_sepal
iris %>% mutate(Sepal.area = Sepal.Length * Sepal.Width, Petal.area = Petal.Length * Petal.Width) %>% filter(Sepal.area > 16.0)
iris %>% mutate(Sepal.area = Sepal.Length * Sepal.Width, Petal.area = Petal.Length * Petal.Width) %>% filter(Sepal.area > 16.0) %>% select(Sepal.area, Petal.area, Species)
median.func <- function(data, idx){
df <- data[idx, ]
c(median(df))
}
set.seed(42)
bootstrap <- boot(iris, median.func, R = 1000)
bootstrap
library(boot)
bootstrap <- boot(iris, median.func, R = 1000)
irs
iris
bootstrap <- boot(iris[,1:4], median.func, R = 1000)
iris[100,]
median(iris[100,])
median(iris[100,1:3])
median(iris[100,1:])
median(iris[100,1:4])
iris[100,1:4]
as.numeric(iris[100,1:4])
median(as.numeric(iris[100,1:4]))
c(median(as.numeric(df)))
median.func <- function(data, idx){
df <- data[idx, ]
c(median(as.numeric(df)))
}
set.seed(42)
bootstrap <- boot(iris[,1:4], median.func, R = 1000)
### bootstrap confidence interval from scratch
orig.median <- median(iris[,3])
orig.median
n <- length(iris[,3])
B <- 1000
boot.median.all <- NULL
for(i in 1:B){
index <- sample(1:n, n, replace = TRUE)
boot.3 <- iris[index, 3]
boot.median <- median(boot.3)
boot.median.all <- c(boot.median.all, boot.median)
}
boot.median.all
hist(boot.median.all, breaks = 20, prob = TRUE)
lines(density(boot.median.all), col = 'red')
hist(boot.median.all, breaks = 50, prob = TRUE)
lines(density(boot.median.all), col = 'red')
sd(boot.median.all)
quantile(boot.median.all, prob = c(0.025, 0.975))
### bootstrap t-test
library("car")
white_matter <- read.table(text="   Control Patient
1   0.3329  0.3306
2   0.3458  0.3375
3   0.3500  0.3874
4   0.3680  0.3485
5   0.3421  0.3548
6   0.3403  0.3876
7   0.3447  0.3755
8   0.3330  0.3644
9   0.3450  0.3206
10  0.3764  0.3587
11  0.3646  0.3570
12  0.3482  0.3423
13  0.3734  0.3583
14  0.3436  0.3457
15  0.3348  0.3770
16  0.3553  0.3419
17  0.3281  0.3416
18  0.3567  0.3703
19  0.3390  0.3525
20  0.3287  0.3596
21  0.3603  0.3519
22  0.3533  0.3443", header = T)
t.vect <- vector(length = B)
p.vect <- vector(length = B)
for(i in 1:B){
boot.c <- sample(white_matter$Control, size=22, replace=T)
boot.p <- sample(white_matter$Patient, size=22, replace=T)
ttest  <- t.test(boot.c, boot.p)
t.vect[i] <- ttest$statistic
p.vect[i] <- ttest$p.value
}
t.vect
mean(t.vect)
mean(p.vect)
t.test(white_matter$Control, white_matter$Patient)
ttest <- t.test(white_matter$Control, white_matter$Patient)
ttest$null.value
ttest$alternative
ttest$conf.int
### binomial distribution make a matrix and let all column sum to 1
X <- matrix(rbinom(100, 20, 0.35), nrow = 20, ncol = 5)
# update_X <- sweep(X, 2, colSums(X), FUN = "/")
c1 <- colSums(X)
X
c1
X/c1
sum(X/c1, axis = 2)
colSums(X/c1)
?scale
z <- max(runif(100, 0, 2), runif(100, 1, 3))
z
z <- apply(cbind(runif(100, 0, 2), runif(100, 1, 3)), 1, FUN = 'max')
z
mean(z)
setwd("~/Dropbox (UFL)/Cohort change points detection/code/simulations/G3")
# setwd("C:/Users/baipl/Dropbox (UFL)/Cohort change points detection/code")
rm(list = ls())
library("sparsevar")
library("VARDetect")
library("MTS")
source("../../simulation_script.R")
source("../../auxiliary_functions.R")
#####################################################################################
### model basic parameters setting test
T <- 400
p <- 20
M <- 25
tau_true <- c(floor(T/4), floor(T/2), floor(3*T/4))
tau_sub <- rep(0, M)
r_T <- 10
subjects <- vector('list', M)
set.seed(1)
for(i in 1:M){
if(i <= 5){
tau_sub[i] <- tau_true[1] + sample(seq(-r_T, r_T), 1)
}else if(i <= 13){
tau_sub[i] <- tau_true[2] + sample(seq(-r_T, r_T), 1)
}else{
tau_sub[i] <- tau_true[3] + sample(seq(-r_T, r_T), 1)
}
}
tau_sub
### transition matrix generating
support_mat <- matrix(0, p, p)
for(k in 1:(p-1)){
support_mat[k, k+1] <- 1
}
magnitudes <- sample(seq(0.55, 0.85, 0.1), M, replace = TRUE)
niter <- 50
cp_result <- vector('list', niter)
individual_result <- vector('list', niter)
cluster_result <- vector('list', niter)
epoch = 1
### generate subject time series
for(i in 1:M){
brks <- c(tau_sub[i], T+1)
entry <- magnitudes[i]
try <- simu_var(method = "sparse",
nob = T,
k = p,
lags = 1,
seed = epoch*i,
brk = brks,
sp_pattern = "off-diagonal",
signals = c(-entry, entry))
subjects[[i]] <- as.matrix(try$series)
}
### apply the iterative clustering algorithm (ICA)
thres <- 2*log(p)*log(T)
fit <- iterative_selection(subjects, lambdas = c(0.1, 0.1), gamma = thres)
setwd("~/Dropbox (UFL)/Cohort change points detection/code/simulations/G2")
# setwd("C:/Users/baipl/Dropbox (UFL)/Cohort change points detection/code")
rm(list = ls())
library("sparsevar")
library("VARDetect")
library("MTS")
source("../../simulation_script.R")
source("../../auxiliary_functions.R")
#####################################################################################
### model basic parameters setting test
T <- 200
p <- 20
M <- 20
tau_true <- c(floor(T/3), floor(2*T/3))
tau_sub <- rep(0, M)
r_T <- 20
subjects <- vector('list', M)
set.seed(1)
for(i in 1:M){
if(i <= 10){
tau_sub[i] <- tau_true[1] + sample(seq(-r_T, r_T), 1)
}else{
tau_sub[i] <- tau_true[2] + sample(seq(-r_T, r_T), 1)
}
}
tau_sub
### transition matrix generating
magnitudes <- sample(seq(0.55, 0.85, 0.1), M, replace = TRUE)
niter <- 50
cp_result <- vector('list', niter)
individual_result <- vector('list', niter)
cluster_result <- vector('list', niter)
epoch = 1
### generate subject time series
for(i in 1:M){
brks <- c(tau_sub[i], T+1)
entry <- magnitudes[i]
try <- simu_var(method = "sparse",
nob = T,
k = p,
lags = 1,
seed = epoch*i,
brk = brks,
sp_pattern = "random",
sp_density = c(0.05, 0.05),
signals = c(-entry, entry))
subjects[[i]] <- as.matrix(try$series)
}
### apply the iterative clustering algorithm (ICA)
thres <- 2*log(p)*log(T)
fit <- iterative_selection(subjects, lambdas = c(0.1, 0.1), gamma = thres)
setwd("~/Dropbox (UFL)/Cohort change points detection/code/simulations/G4")
# setwd("C:/Users/baipl/Dropbox (UFL)/Cohort change points detection/code")
rm(list = ls())
library("sparsevar")
library("VARDetect")
library("MTS")
source("../../simulation_script.R")
source("../../auxiliary_functions.R")
#####################################################################################
### model basic parameters setting test
T <- 400
p <- 20
M <- 20
tau_true <- c(floor(T/8), floor(T/2), floor(4*T/5))
tau_sub <- rep(0, M)
r_T <- 10
subjects <- vector('list', M)
set.seed(1)
for(i in 1:M){
if(i <= 3){
tau_sub[i] <- tau_true[1] + sample(seq(-r_T, r_T), 1)
}else if(i <= 10){
tau_sub[i] <- tau_true[2] + sample(seq(-r_T, r_T), 1)
}else{
tau_sub[i] <- tau_true[3] + sample(seq(-r_T, r_T), 1)
}
}
tau_sub
### transition matrix generating
magnitudes <- sample(seq(0.55, 0.85, 0.1), M, replace = TRUE)
niter <- 50
cp_result <- vector('list', niter)
individual_result <- vector('list', niter)
cluster_result <- vector('list', niter)
epoch = 1
### generate subject time series
for(i in 1:M){
brks <- c(tau_sub[i], T+1)
entry <- magnitudes[i]
try <- simu_var(method = "sparse",
nob = T,
k = p,
lags = 1,
seed = epoch*i,
brk = brks,
sp_pattern = "random",
sp_density = c(0.05, 0.05),
signals = c(-entry, entry))
subjects[[i]] <- as.matrix(try$series)
}
### apply the iterative clustering algorithm (ICA)
thres <- 2*log(p)*log(T)
fit <- iterative_selection(subjects, lambdas = c(0.1, 0.1), gamma = thres)
